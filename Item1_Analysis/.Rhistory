desc_data <- read_csv("Desktop/Data_Science2/Project/Code/proj_env/Output_Data/Descriptions_tfidf2010.csv")
dist = cosine(as.matrix(desc_data[,-(1:3)]))
View(dist)
View(desc_data)
View(desc_data)
plot(hc.complete, main=" R Complete Linkage", xlab="", sub ="", cex=.9)
hc.complete=hclust(dist, method="complete")
View(dist)
hc.complete=hclust(matrix(dist), method="complete")
plot(hc.complete, main=" R Complete Linkage", xlab="", sub ="", cex=.9)
hc.complete=hclust(as.matrix(dist), method="complete")
plot(hc.complete, main="R Complete Linkage", xlab="", sub ="", cex=.9)
hc.complete=hclust(na.omit(dist), method="complete")
plot(hc.complete, main="R Complete Linkage", xlab="", sub ="", cex=.9)
WORK.DIR = "Desktop/Data_Science2/PSET6"
setwd(WORK.DIR)
WORK.DIR = "Desktop/Data_Science2/PSET6"
setwd(WORK.DIR)
WORK.DIR = "Desktop/Data_Science2/PSET6"
setwd(WORK.DIR)
#load tx countries csv
library(readr)
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#load tx countries csv
library(readr)
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#load tx countries csv
library(readr)
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#load tx countries csv
library(readr)
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
names(TX_Counties)
TX_Counties["Population"]
as.numeric(TX_Counties["Population"])
mode(TX_Counties["Population"])
str_replace_all(TX_Counties["Population"],"?","")
TX_Counties["Population"]
library(readr)
library(stringr)
population = TX_Counties["Population"]
clean_population = str_replace_all(population, "?","")
TX_Counties["Population"][1]
TX_Counties["Population"][,1]
TX_Counties["Population"][1,1]
str_replace_all(TX_Counties["Population"][1,1],"?",""
str_replace_all(TX_Counties["Population"][1,1],"?","")
str_replace_all(TX_Counties["Population"][1,1],"?","")
str_replace_all(TX_Counties["Population"][1,1],'?',"")
View(TX_Counties)
gsub(TX_Counties["Population"][1,1],'?',"")
gsub(TX_Counties["Population"][1,1],'',"?")
gsub(TX_Counties["Population"][1,1],'',"")
TX_Counties["Population"][1,1]
gsub(TX_Counties["Population"],'?',"")
gsub(,'?',"",TX_Counties["Population"])
gsub('?',"",TX_Counties["Population"])
gsub("?","",TX_Counties["Population"])
length(TX_Counties["Population"][1,1])
length(TX_Counties["Population"][1,])
gsub("?","",TX_Counties["Population"])
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
clean_population = str_replace_all(population, "?","")
library(stringr)
clean_population = str_replace_all(population, "?","")
for (pop in population){
print(length(pop))
}
population = TX_Counties["Population"]
for (pop in population){
lenght(pop)
}
for (pop in population){
length(pop)
}
for (pop in population){
length(pop)
}
for (pop in population){
length(pop)
}
for (pop in population){
length(pop)
}
for (pop in population){
length(pop)
}
for (pop in population){
length(pop)
}
mode(population)
for (pop in population){
print(pop)
}
for (pop in population){
print(length(pop))
}
for (pop in population){
mode(pop)
}
for (pop in population){
print(mode(pop))
}
for (pop in population){
clean_pop = str_replace_all(pop,"?","")
}
test_str = "7004140180000000000?14,018"
population = c(TX_Counties["Population"])
str_replace_all(population,"?","")
str_replace_all(population,"?","")
length(test_str)
nchar(test_str)
test_str2 = "7003828300000000000?8,283"
nchar(test_str2)
for (pop in population){
nchar(pop)
}
for (pop in population){
print(nchar(pop))
}
View(TX_Counties)
View(TX_Counties)
test_1 = "7004584580000000000?"
test_2 = "7005310235000000000?"
length(test_1)
nchar(test_1)
substr(test_str,1,20)
substr(test_str,20,nchar(test_str))
substr(test_str,21,nchar(test_str))
population = c(TX_Counties["Population"])
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
append(clean_population,clean_pop)
}
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
append(clean_population,as.numeric(clean_pop))
}
clean_pop
clean_population = as.numeric(clean_population)
clean_population
clean_population = list()
for (pop in population){
clean_pop = as.numeric(substr(pop,21,nchar(pop)))
append(clean_population,clean_pop)
}
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
append(clean_population,gsub(",","",clean_pop))
}
clean_population = list()
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
append(clean_population,gsub(",","",clean_pop))
}
library(readr)
library(stringr)
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
append(clean_population,gsub(",","",clean_pop))
}
##report median
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
clean_pop = str_remove(clean_pop,",")
append(clean_population,clean_pop)
}
population = c(TX_Counties["Population"])
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
clean_pop = str_remove(clean_pop,",")
append(clean_population,as.numeric(clean_pop))
}
View(population)
View(TX_Counties)
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
clean_pop = str_remove(clean_pop,",")
append(clean_population,as.numeric(clean_pop))
}
##report median
clean_pop
as.numeric(clean_pop)
clean_population = list()
for (pop in population){
clean_pop = substr(pop,21,nchar(pop))
clean_pop = str_remove_all(clean_pop,",")
append(clean_population,as.numeric(clean_pop))
}
clean_pop
mode(clean_pop)
list(clean_pop)
mode(list(clean_pop))
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
#1b
##extract population field and convert the field to numeric
#1c
##write cleaned dataset to csv
clean_population = list(clean_population_num)
clean_population = list(clean_population_num)
##report median
print("Population Median:", median(clean_population))
median(clean_population)
median(clean_population)
median(clean_population_num)
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print("Population Median:", median(clean_population_num))
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print("Population Median:")
median(clean_population)
print("Population Median:")
median(clean_population_num)
print("Population Median:", clean_population_num)
print(c("Population Median:",median(clean_population_num)))
View(TX_Counties)
area = c(TX_Counties["Area"])
for (ar in area){
clean_area_str = substr(ar,21,nchar(ar))
clean_area_num = as.numeric(str_remove_all(clean_area_str,","))
}
##report median
print(c("Area Median:",median(clean_area_num)))
c(TX_Counties["Area"])
area = c(TX_Counties["Area"])
for (ar in area){
clean_area_str = substr(ar,21,nchar(ar))
clean_area_str2 = str_remove_all(clean_area_str,"\xffsq\xffmi")
clean_area_str3 = str_remove_all(clean_area_str,",")
clean_area_num = as.numeric(clean_area_str3)
}
##report median
print(c("Area Median:",median(clean_area_num)))
nchar(""7003124200000000000?")
nchar("7003124200000000000?")
ar
area = c(TX_Counties["Area"])
for (ar in area){
clean_area_str = substr(ar,21,nchar(ar))
#clean_area_str2 = str_remove_all(clean_area_str,"\xffsq\xffmi")
#clean_area_str3 = str_remove_all(clean_area_str,",")
#clean_area_num = as.numeric(clean_area_str3)
}
nchar(ar)
area = c(TX_Counties["Area"])
for (ar in area){
clean_ar = str_remove_all(clean_area_str,c("\xffsq\xffmi",","))
clean_area_str = substr(clean_ar,21,nchar(ar))
clean_ar
area = c(TX_Counties["Area"])
for (ar in area){
clean_ar = str_remove_all(clean_area_str,c("\xffsq\xffmi",","))
clean_area_str = substr(clean_ar,21,nchar(ar))
#clean_area_num = as.numeric(clean_area_str3)
}
clean_ar
5+4
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print(c("Population Median:",median(clean_population_num)))
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print(c("Population Median:",median(clean_population_num)))
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print(c("Population Median:",median(clean_population_num)))
#1b
##extract population field and convert the field to numeric
##report median
print(c("Area Median:",median(clean_area_num)))
##report median
#1c
##write cleaned dataset to csv
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print(c("Population Median:",median(clean_population_num)))
#1b
##extract population field and convert the field to numeric
area = c(TX_Counties["Area"])
for (ar in area){
clean_ar = str_remove_all(clean_area_str,c("\xffsq\xffmi",","))
clean_area_str = substr(clean_ar,21,nchar(ar))
#clean_area_num = as.numeric(clean_area_str3)
}
library(readr)
library(stringr)
#load tx countries csv
TX_Counties <- read_csv("Desktop/Data_Science2/PSET6/TX Counties.csv")
#1a
##extract population and convert the data field to be a numeric
population = c(TX_Counties["Population"])
for (pop in population){
clean_pop_str = substr(pop,21,nchar(pop))
clean_population_num = as.numeric(str_remove_all(clean_pop_str,","))
}
##report median
print(c("Population Median:",median(clean_population_num)))
desc_data = read_csv("Desktop/Data_Science2/Project/Code/proj_env/Output_Data/Descriptions_tfidf2012.csv")
data_test = 1 - cosine(as.matrix(desc_data[,-(1:3)]))
heatmap(data_test)
desc_data = read_csv("Desktop/Data_Science2/Project/Code/proj_env/Output_Data/Descriptions_tfidf2012.csv")
library(readr)
library(lsa)
library(ISLR)
library(stringr)
library(stringi)
library(dplyr)
library(tibble)
desc_data = read_csv("Desktop/Data_Science2/Project/Code/proj_env/Output_Data/Descriptions_tfidf2012.csv")
data_test = 1 - cosine(as.matrix(desc_data[,-(1:3)]))
heatmap(data_test)
?heatmap
heatmap(data_test, col = bluered(100))
heatmap(data_test, legend=TRUE)
data_test
heatmap(data_test,xlab=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,labrow=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,labrow=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,labRow=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .2, labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .3, labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .5, labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .5, cexCol = .5, labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .5, cexCol = .5, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .4, cexCol = .4, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
data_test = 1 - cosine(as.matrix(desc_data[,-(1:3)]))
heatmap(data_test,cexRow = .4, cexCol = .4, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .3, cexCol = .3, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap(data_test,cexRow = .3, cexCol = .3, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"),legend=c("none", "col"))
library(ggplot2)
library(ggplot2)
ggplot(data_test_ + geom_tile())
library(ggplot2)
ggplot(data_test) + geom_tile())
ggplot(data_test) + geom_tile()
ggplot(data, aes(x, y, fill = values)) +              # Change gradient color
geom_tile()
library(ggplot2)
ggplot(data_test, aes(x, y, fill = values)) +              # Change gradient color
geom_tile()
heatmap.2(data_test,cexRow = .3, cexCol = .3, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
heatmap.2(data_test,cexRow = .3, cexCol = .3, margins = c(2,2), labRow=str_remove_all(names(desc_data),"_tfidf_norm"),labCol=str_remove_all(names(desc_data),"_tfidf_norm"))
x1 = c(0,1,1,2)
x2 = c(2,2,0,1)
data_set = matrix(c(x1,x2),byrow = TRUE)
data_set
data_set = matrix(c(x1,x2),byrow = FALSE)
data_set
data_set = matrix(c(x1,x2),byrow = FALSE)
data_set
data_set = matrix((x1,x2),byrow = FALSE)
data_set
data_set = matrix(c(0,1,1,2,2,2,0,1),4,2,byrow = FALSE)
data_set
library(ISLR)
hc = hclust(data_set)
plot(hc)
library(ISLR)
hc = hclust(data_set)
plot(hc)
data_set
data_set = as.matrix(c(0,1,1,2,2,2,0,1),4,2,byrow = FALSE)
hc = hclust(data_set)
library(ISLR)
x1 = c(0,1,1,2)
x2 = c(2,2,0,1)
data_set = as.matrix(c(0,1,1,2,2,2,0,1),4,2,byrow = FALSE)
data_set
hc = hclust(data_set)
plot(hc)
library(ISLR)
data_set = as.matrix(c(0,1,1,2,2,2,0,1),4,2,byrow = FALSE)
data_set
hc = hclust(data_set)
plot(hc)
hc = hclust(na.omit(data_set)
plot(hc)
hc = hclust(na.omit(data_set))
data_set = matrix(c(0,1,1,2,2,2,0,1),4,2,byrow = FALSE)
data_set
hc = hclust(dist(data_set))
plot(hc)
dat_dist = dist(data_set)
dat_dist = dist(data_set)**2
dat_dist
hc = hclust(dat_dist)
plot(hc)
hc = hclust(dat_dist,method = "single")
plot(hc)
hc = hclust(dat_dist,method = "average")
plot(hc)
data_set
dat_dist
3/2
hc = hclust(dat_dist,method = "centroid")
plot(hc)
library(readr)
library(lsa)
library(ISLR)
library(stringr)
library(stringi)
library(dplyr)
library(tibble)
library(tidyverse)
library(wordcloud)
library(matrixStats)
library(dendextend)
WORK.DIR = "/Users/dcody/Desktop/Data_Science2/Project/Code/Descriptions_Project/Item1_Analysis"
setwd(WORK.DIR)
data_dir = 'Description_Data/'
visuals_dir = 'Visuals/'
num_clustres = 10 #number of clusters to assign the data too
tfidf_read = read_csv(paste(data_dir,'tfidf_2019.csv',sep = ""))
tfidf_df = tfidf_read[,-(1:2)]
cos_dist = as.dist(1-cosine(as.matrix(tfidf_df))) #description distance object
#heriarichincal clustering with complete linkage
hc=hclust(cos_dist, method='complete')
hc_clusters = cutree(hc, k = num_clustres)
#k-means CLustering
km.out = kmeans(cos_dist,num_clustres,nstart = 10)
km.out$tot.withinss #tested nstart up to nstart =100. Min tot.withinss found at nstart = 10
km_clusters = km.out$cluster
#compare kmeans and heriarchical clustering
table(hc_clusters,km_clusters)
plot(table(hc_clusters,km_clusters), main = "Kmeans & Heirarchical Similarity")
km_clusters
